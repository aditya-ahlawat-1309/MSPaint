{"ast":null,"code":"const myTimeout = setTimeout(myGreeting, 1500);\n\nfunction myGreeting() {\n  // when the DOM has loaded\n  window.onload = function () {\n    // create elemnt object whose id is (\" -------- \") ------------------//\n    const activeToolEl = document.getElementById(\"active-tool\");\n    const brushColorBtn = document.getElementById(\"brush-color\");\n    const brushIcon = document.getElementById(\"brush\");\n    const brushSize = document.getElementById(\"brush-size\");\n    const brushSlider = document.getElementById(\"brush-slider\");\n    const bucketColorBtn = document.getElementById(\"bucket-color\");\n    const eraser = document.getElementById(\"eraser\");\n    const clearCanvasBtn = document.getElementById(\"clear-canvas\");\n    const saveStorageBtn = document.getElementById(\"save-storage\");\n    const loadStorageBtn = document.getElementById(\"load-storage\");\n    const clearStorageBtn = document.getElementById(\"clear-storage\");\n    const downloadBtn = document.getElementById(\"download\");\n    const {\n      body\n    } = document; // -----------------------------------------------------------------//\n    // -------------- Global Variables ------------------------ //\n\n    const canvas = document.createElement(\"canvas\"); // id of the canvas\n\n    canvas.id = \"canvas\"; // we want the canvas in 2d or 3d and equalise it to the context -> 2d canvas\n\n    const context = canvas.getContext(\"2d\");\n    let currentSize = 45;\n    let bucketColor = \"#FFFFFF\";\n    let currentColor = \"#f5ff50\";\n    let isEraser = false;\n    let isMouseDown = false;\n    let drawnArray = []; // -------------------------------------------------------//\n    // -------------- Formatting Brush Size --------------------//\n\n    function displayBrushSize() {\n      // if brushSlider - (document with id = brush-slider) value is less than 10\n      if (brushSlider.value < 10) {\n        // change the text of brushSIze tp brushSlider value and add zero before it;\n        brushSize.textContent = `0${brushSlider.value}`;\n      } else {\n        // change the text of brushSIze tp brushSlider value\n        brushSize.textContent = brushSlider.value;\n      }\n    } // ------------------------------------------------------------//\n    //--------------- Setting Brush Size ----------------------//\n    // on changing of the value of the brushSlider\n\n\n    brushSlider.addEventListener(\"change\", () => {\n      // change the currentSize and set it to the value\n      currentSize = brushSlider.value; // display the brush Size by calling the function\n\n      displayBrushSize();\n    }); // -----------------------------------------------------------//\n    // ------------------- Setting Brush Color ------------------//\n    // if there is a chnage then call this\n\n    brushColorBtn.addEventListener(\"change\", () => {\n      // isEraser  = false (it is not an eraser)\n      isEraser = false; // select color according to the value of the brushColorBtn\n\n      currentColor = `#${brushColorBtn.value}`;\n    }); // ----------------------------------------------------------//\n    // -----------------Setting Background Color ----------------//\n    // if there is any change\n\n    bucketColorBtn.addEventListener(\"change\", () => {\n      // bucket color is equal to the bucketColorBtn value\n      bucketColor = `#${bucketColorBtn.value}`; // call create canvas\n\n      createCanvas(); // call restore canvas\n\n      restoreCanvas(); // it is basically the filling of the entire canvas white background with the same color\n    }); // ----------------------------------------------------------//\n    // ---------------- Eraser -------------------------//\n    // on button click with id -> ersaer ->\n\n    eraser.addEventListener(\"click\", () => {\n      // isEraser -> yes,\n      isEraser = true; // color of brushIcon -> \"white\"\n\n      brushIcon.style.color = \"white\"; // color of eraser stroke -> \"white\"\n\n      eraser.style.color = \"black\"; // text inside the left most Button\n\n      activeToolEl.textContent = \"Eraser\"; // currentColor === ----->>>>>  bucketColor\n\n      currentColor = bucketColor; // currentSize ---->>>> 50;\n\n      currentSize = 50;\n    }); // ----------------------------------------------------//\n    // ----------------- Switch back to Brush ---------------//\n\n    function switchToBrush() {\n      // it's not the eraser\n      isEraser = false; // text of the left most element\n\n      activeToolEl.textContent = \"Brush\"; // color of the brushIcon\n\n      brushIcon.style.color = \"black\"; // color of the eraser icon\n\n      eraser.style.color = \"white\"; // currentColor ---->>> value\n\n      currentColor = `#${brushColorBtn.value}`; // currentSize ----->>>> 45\n\n      currentSize = 45; // sliderValue ----->>>> 45\n\n      brushSlider.value = 45; // display the size of the Brush also\n\n      displayBrushSize();\n    } // -------------------------------------------------------//\n    // ---------------- Create Canvas ----------------------//\n\n\n    function createCanvas() {\n      // canvas ki width -> jitni window ki width hai\n      canvas.width = window.innerWidth; // canvas ki height -> jitni window ki height hai\n\n      canvas.height = window.innerHeight - 50; // fill the entire canvas with bucketColor -> make changes in the context (2d context) -> where we draw\n\n      context.fillStyle = bucketColor; // fill the canvas from canvas width till canvas height\n\n      context.fillRect(0, 0, canvas.width, canvas.height); // make changes in the entire body which are made in the canvas element\n\n      body.appendChild(canvas); // switch to brush\n\n      switchToBrush();\n    } // ------------------------------------------------------//\n    // ---------------- Clear Canvas -----------------------------//\n\n\n    clearCanvasBtn.addEventListener(\"click\", () => {\n      // createCanvas() from scratch\n      createCanvas(); // drwanArray is Empty\n\n      drawnArray = []; // Active Tool ---->>>> text in the left most element\n\n      activeToolEl.textContent = \"Canvas Cleared\"; // switch to Brush automatically after 1.5 seconds\n\n      setTimeout(switchToBrush, 1500);\n    }); // ------------------------------------------------------------//\n    // ------------ Draw what is stored in DrawnArray ----------------//\n    // restore canvas function\n\n    function restoreCanvas() {\n      // array of points where the mouse moved through\n      for (let i = 1; i < drawnArray.length; i++) {\n        // continuous path function in the canvas function and element of the HTML\n        context.beginPath(); // join all the elements\n\n        context.moveTo(drawnArray[i - 1].x, drawnArray[i - 1].y); // How thick the line should be? -> equal to the size stored in the drawnArray\n\n        context.lineWidth = drawnArray[i].size; // how the line should be like  -> round shaped\n\n        context.lineCap = \"round\"; // if we are using eraser\n\n        if (drawnArray[i].eraser) {\n          // then stroke style -> when you click what is visible -> should have bucketColor\n          context.strokeStyle = bucketColor;\n        } else {\n          // nhi toh equal to the color selected\n          context.strokeStyle = drawnArray[i].color;\n        } // x -> y tak line honi chahiye\n\n\n        context.lineTo(drawnArray[i].x, drawnArray[i].y); // Draw it -> yeh sabb kuch calculate karke draw karo -> instruction to Computer\n\n        context.stroke();\n      }\n    } // ----------------------------------------------------------------//\n    // --------------- Store Drawn Lines in DrawnArray ----------------//\n\n\n    function storeDrawn(x, y, size, color, erase) {\n      // push the following in the drwanArray\n      const line = {\n        x,\n        y,\n        size,\n        color,\n        erase\n      }; // put / push\n\n      drawnArray.push(line);\n    } // ----------------------------------------------------------------//\n    // --------------------- Get Mouse Position ---------------- //\n    // as soon as mouse is clicked\n\n\n    function getMousePosition(event) {\n      // get the x and y coordinate of the mouse clicked\n      const boundaries = canvas.getBoundingClientRect();\n      return {\n        x: event.clientX - boundaries.left,\n        y: event.clientY - boundaries.top\n      };\n    } // ---------------------------------------------------------//\n    // ---------------------- Mouse Down -----------------------//\n    // if mouse is pulled down\n\n\n    canvas.addEventListener(\"mousedown\", event => {\n      // set isMouseDown to True\n      isMouseDown = true; // get the current Position of the mouse\n\n      const currentPosition = getMousePosition(event); // from x to y fill it\n\n      context.moveTo(currentPosition.x, currentPosition.y); // then start the path\n\n      context.beginPath(); // line width equal to current size\n\n      context.lineWidth = currentSize; // line cap = \"round\"\n\n      context.lineCap = \"round\"; // strokeStyle should be equal to the currentColor\n\n      context.strokeStyle = currentColor;\n    }); // ---------------------------------------------------------//\n    // ------------------------ Mouse Move ---------------------//\n    // if mouse moves up\n\n    canvas.addEventListener(\"mousemove\", event => {\n      // if mouse is moving and downwards\n      if (isMouseDown) {\n        // get the currentPosition\n        const currentPosition = getMousePosition(event); // from yaha se yaha line draw karo\n\n        context.lineTo(currentPosition.x, currentPosition.y); // draw it\n\n        context.stroke(); // call the function with following parameters\n        // store the parameters in the drawnArray\n\n        storeDrawn(currentPosition.x, currentPosition.y, currentSize, currentColor, isEraser);\n      } else {\n        // store nothing\n        storeDrawn(undefined);\n      }\n    }); // ------------------------------------------------------------//\n    // --------------------- Mouse Up ---------------------------//\n    // if move is moving up\n\n    canvas.addEventListener(\"mouseup\", () => {\n      // it's NOT moving down\n      isMouseDown = false;\n    }); // ------------------------------------------------------------//\n    // ----------------  Save to Local Storage ------------------- //\n    // on Button Click\n\n    saveStorageBtn.addEventListener(\"click\", () => {\n      // set the localStorage as DrawnArray\n      localStorage.setItem(\"savedCanvas\", JSON.stringify(drawnArray)); // Active Tool ----->>>> text of the left most element\n\n      activeToolEl.textContent = \"Canvas Saved\"; // after 1.5 seconds switchToBrush\n\n      setTimeout(switchToBrush, 1500);\n    }); // ----------------------------------------------------------- //\n    // ---------------- Load from Local Storage ------------------//\n    // on Button Click ->\n\n    loadStorageBtn.addEventListener(\"click\", () => {\n      // if there is something in localStorage\n      if (localStorage.getItem(\"savedCanvas\")) {\n        // fill the drawnArray with the localStorage with the name --->>> 'savedCanvas'\n        drawnArray = JSON.parse(localStorage.savedCanvas); // restore Canavs;\n\n        restoreCanvas(); // Active Tool ----->>>>> name in the left most element\n\n        activeToolEl.textContent = \"Canvas Loaded\"; // switch to Brush after 1.5 seconds\n\n        setTimeout(switchToBrush, 1500);\n      } // nhi toh \"No Canvas Found\"\n      else {\n        activeToolEl.textContent = \"No Canvas Found\"; // and switch to Brush after 1.5 seconds\n\n        setTimeout(switchToBrush, 1500);\n      }\n    }); // --------------------------------------------------------------//\n    // -------------- Clear Local Storage ----------------------//\n    // on button Click\n\n    clearStorageBtn.addEventListener(\"click\", () => {\n      // remove the LOCAL STROAGE ITEM with NAME -> \"\" savedCanvas \"\"\n      localStorage.removeItem(\"savedCanvas\"); // Active Tool\n\n      activeToolEl.textContent = \"Local Storage Cleared\"; // switchToBrush after 1.5 seconds\n\n      setTimeout(switchToBrush, 1500);\n    }); // --------------------------------------------------------------//\n    // ----------------- Download Image ------------------------//\n    // on button click ->\n\n    downloadBtn.addEventListener(\"click\", () => {\n      // download with URL -> image/jpeg\n      downloadBtn.href = canvas.toDataURL(\"image/jpeg\", 1); // name of the download\n\n      downloadBtn.download = \"paint-example.jpeg\"; // Active Tool\n\n      activeToolEl.textContent = \"Image File Saved\"; // switchToBrush after 1.5 seconds\n\n      setTimeout(switchToBrush, 1500);\n    }); // -----------------------------------------------------------//\n    // ------------------ Event Listener --------------------- //\n    // if clicked on BrushIcon then switchToBrush\n\n    brushIcon.addEventListener(\"click\", switchToBrush); // ------------------------------------------------------- //\n    // --------------- On Load ------------------------------//\n\n    createCanvas(); // -------------------------------------------------------//\n  };\n}","map":{"version":3,"names":["myTimeout","setTimeout","myGreeting","window","onload","activeToolEl","document","getElementById","brushColorBtn","brushIcon","brushSize","brushSlider","bucketColorBtn","eraser","clearCanvasBtn","saveStorageBtn","loadStorageBtn","clearStorageBtn","downloadBtn","body","canvas","createElement","id","context","getContext","currentSize","bucketColor","currentColor","isEraser","isMouseDown","drawnArray","displayBrushSize","value","textContent","addEventListener","createCanvas","restoreCanvas","style","color","switchToBrush","width","innerWidth","height","innerHeight","fillStyle","fillRect","appendChild","i","length","beginPath","moveTo","x","y","lineWidth","size","lineCap","strokeStyle","lineTo","stroke","storeDrawn","erase","line","push","getMousePosition","event","boundaries","getBoundingClientRect","clientX","left","clientY","top","currentPosition","undefined","localStorage","setItem","JSON","stringify","getItem","parse","savedCanvas","removeItem","href","toDataURL","download"],"sources":["D:/Mac OS X Projects/7. Mini-Apps/paint-clone-2/src/script.js"],"sourcesContent":["const myTimeout = setTimeout(myGreeting, 1500);\r\n\r\nfunction myGreeting() {\r\n  // when the DOM has loaded\r\n  window.onload = function () {\r\n    // create elemnt object whose id is (\" -------- \") ------------------//\r\n    const activeToolEl = document.getElementById(\"active-tool\");\r\n    const brushColorBtn = document.getElementById(\"brush-color\");\r\n    const brushIcon = document.getElementById(\"brush\");\r\n    const brushSize = document.getElementById(\"brush-size\");\r\n    const brushSlider = document.getElementById(\"brush-slider\");\r\n    const bucketColorBtn = document.getElementById(\"bucket-color\");\r\n    const eraser = document.getElementById(\"eraser\");\r\n    const clearCanvasBtn = document.getElementById(\"clear-canvas\");\r\n    const saveStorageBtn = document.getElementById(\"save-storage\");\r\n    const loadStorageBtn = document.getElementById(\"load-storage\");\r\n    const clearStorageBtn = document.getElementById(\"clear-storage\");\r\n    const downloadBtn = document.getElementById(\"download\");\r\n    const { body } = document;\r\n    // -----------------------------------------------------------------//\r\n\r\n    // -------------- Global Variables ------------------------ //\r\n    const canvas = document.createElement(\"canvas\");\r\n    // id of the canvas\r\n    canvas.id = \"canvas\";\r\n    // we want the canvas in 2d or 3d and equalise it to the context -> 2d canvas\r\n    const context = canvas.getContext(\"2d\");\r\n    let currentSize = 45;\r\n    let bucketColor = \"#FFFFFF\";\r\n    let currentColor = \"#f5ff50\";\r\n    let isEraser = false;\r\n    let isMouseDown = false;\r\n    let drawnArray = [];\r\n    // -------------------------------------------------------//\r\n\r\n    // -------------- Formatting Brush Size --------------------//\r\n    function displayBrushSize() {\r\n      // if brushSlider - (document with id = brush-slider) value is less than 10\r\n      if (brushSlider.value < 10) {\r\n        // change the text of brushSIze tp brushSlider value and add zero before it;\r\n        brushSize.textContent = `0${brushSlider.value}`;\r\n      } else {\r\n        // change the text of brushSIze tp brushSlider value\r\n        brushSize.textContent = brushSlider.value;\r\n      }\r\n    }\r\n    // ------------------------------------------------------------//\r\n\r\n    //--------------- Setting Brush Size ----------------------//\r\n    // on changing of the value of the brushSlider\r\n    brushSlider.addEventListener(\"change\", () => {\r\n      // change the currentSize and set it to the value\r\n      currentSize = brushSlider.value;\r\n      // display the brush Size by calling the function\r\n      displayBrushSize();\r\n    });\r\n    // -----------------------------------------------------------//\r\n\r\n    // ------------------- Setting Brush Color ------------------//\r\n    // if there is a chnage then call this\r\n    brushColorBtn.addEventListener(\"change\", () => {\r\n      // isEraser  = false (it is not an eraser)\r\n      isEraser = false;\r\n      // select color according to the value of the brushColorBtn\r\n      currentColor = `#${brushColorBtn.value}`;\r\n    });\r\n    // ----------------------------------------------------------//\r\n\r\n    // -----------------Setting Background Color ----------------//\r\n    // if there is any change\r\n    bucketColorBtn.addEventListener(\"change\", () => {\r\n      // bucket color is equal to the bucketColorBtn value\r\n      bucketColor = `#${bucketColorBtn.value}`;\r\n      // call create canvas\r\n      createCanvas();\r\n      // call restore canvas\r\n      restoreCanvas();\r\n      // it is basically the filling of the entire canvas white background with the same color\r\n    });\r\n    // ----------------------------------------------------------//\r\n\r\n    // ---------------- Eraser -------------------------//\r\n    // on button click with id -> ersaer ->\r\n    eraser.addEventListener(\"click\", () => {\r\n      // isEraser -> yes,\r\n      isEraser = true;\r\n      // color of brushIcon -> \"white\"\r\n      brushIcon.style.color = \"white\";\r\n      // color of eraser stroke -> \"white\"\r\n      eraser.style.color = \"black\";\r\n      // text inside the left most Button\r\n      activeToolEl.textContent = \"Eraser\";\r\n      // currentColor === ----->>>>>  bucketColor\r\n      currentColor = bucketColor;\r\n      // currentSize ---->>>> 50;\r\n      currentSize = 50;\r\n    });\r\n    // ----------------------------------------------------//\r\n\r\n    // ----------------- Switch back to Brush ---------------//\r\n    function switchToBrush() {\r\n      // it's not the eraser\r\n      isEraser = false;\r\n      // text of the left most element\r\n      activeToolEl.textContent = \"Brush\";\r\n      // color of the brushIcon\r\n      brushIcon.style.color = \"black\";\r\n      // color of the eraser icon\r\n      eraser.style.color = \"white\";\r\n      // currentColor ---->>> value\r\n      currentColor = `#${brushColorBtn.value}`;\r\n      // currentSize ----->>>> 45\r\n      currentSize = 45;\r\n      // sliderValue ----->>>> 45\r\n      brushSlider.value = 45;\r\n      // display the size of the Brush also\r\n      displayBrushSize();\r\n    }\r\n    // -------------------------------------------------------//\r\n\r\n    // ---------------- Create Canvas ----------------------//\r\n    function createCanvas() {\r\n      // canvas ki width -> jitni window ki width hai\r\n      canvas.width = window.innerWidth;\r\n      // canvas ki height -> jitni window ki height hai\r\n      canvas.height = window.innerHeight - 50;\r\n      // fill the entire canvas with bucketColor -> make changes in the context (2d context) -> where we draw\r\n      context.fillStyle = bucketColor;\r\n      // fill the canvas from canvas width till canvas height\r\n      context.fillRect(0, 0, canvas.width, canvas.height);\r\n      // make changes in the entire body which are made in the canvas element\r\n      body.appendChild(canvas);\r\n      // switch to brush\r\n      switchToBrush();\r\n    }\r\n    // ------------------------------------------------------//\r\n\r\n    // ---------------- Clear Canvas -----------------------------//\r\n    clearCanvasBtn.addEventListener(\"click\", () => {\r\n      // createCanvas() from scratch\r\n      createCanvas();\r\n      // drwanArray is Empty\r\n      drawnArray = [];\r\n      // Active Tool ---->>>> text in the left most element\r\n      activeToolEl.textContent = \"Canvas Cleared\";\r\n      // switch to Brush automatically after 1.5 seconds\r\n      setTimeout(switchToBrush, 1500);\r\n    });\r\n    // ------------------------------------------------------------//\r\n\r\n    // ------------ Draw what is stored in DrawnArray ----------------//\r\n    // restore canvas function\r\n    function restoreCanvas() {\r\n      // array of points where the mouse moved through\r\n      for (let i = 1; i < drawnArray.length; i++) {\r\n        // continuous path function in the canvas function and element of the HTML\r\n        context.beginPath();\r\n        // join all the elements\r\n        context.moveTo(drawnArray[i - 1].x, drawnArray[i - 1].y);\r\n        // How thick the line should be? -> equal to the size stored in the drawnArray\r\n        context.lineWidth = drawnArray[i].size;\r\n        // how the line should be like  -> round shaped\r\n        context.lineCap = \"round\";\r\n        // if we are using eraser\r\n        if (drawnArray[i].eraser) {\r\n          // then stroke style -> when you click what is visible -> should have bucketColor\r\n          context.strokeStyle = bucketColor;\r\n        } else {\r\n          // nhi toh equal to the color selected\r\n          context.strokeStyle = drawnArray[i].color;\r\n        }\r\n        // x -> y tak line honi chahiye\r\n        context.lineTo(drawnArray[i].x, drawnArray[i].y);\r\n        // Draw it -> yeh sabb kuch calculate karke draw karo -> instruction to Computer\r\n        context.stroke();\r\n      }\r\n    }\r\n    // ----------------------------------------------------------------//\r\n\r\n    // --------------- Store Drawn Lines in DrawnArray ----------------//\r\n    function storeDrawn(x, y, size, color, erase) {\r\n      // push the following in the drwanArray\r\n      const line = {\r\n        x,\r\n        y,\r\n        size,\r\n        color,\r\n        erase,\r\n      };\r\n      // put / push\r\n      drawnArray.push(line);\r\n    }\r\n    // ----------------------------------------------------------------//\r\n\r\n    // --------------------- Get Mouse Position ---------------- //\r\n    // as soon as mouse is clicked\r\n    function getMousePosition(event) {\r\n      // get the x and y coordinate of the mouse clicked\r\n      const boundaries = canvas.getBoundingClientRect();\r\n      return {\r\n        x: event.clientX - boundaries.left,\r\n        y: event.clientY - boundaries.top,\r\n      };\r\n    }\r\n    // ---------------------------------------------------------//\r\n\r\n    // ---------------------- Mouse Down -----------------------//\r\n    // if mouse is pulled down\r\n    canvas.addEventListener(\"mousedown\", (event) => {\r\n      // set isMouseDown to True\r\n      isMouseDown = true;\r\n      // get the current Position of the mouse\r\n      const currentPosition = getMousePosition(event);\r\n      // from x to y fill it\r\n      context.moveTo(currentPosition.x, currentPosition.y);\r\n      // then start the path\r\n      context.beginPath();\r\n      // line width equal to current size\r\n      context.lineWidth = currentSize;\r\n      // line cap = \"round\"\r\n      context.lineCap = \"round\";\r\n      // strokeStyle should be equal to the currentColor\r\n      context.strokeStyle = currentColor;\r\n    });\r\n    // ---------------------------------------------------------//\r\n\r\n    // ------------------------ Mouse Move ---------------------//\r\n\r\n    // if mouse moves up\r\n    canvas.addEventListener(\"mousemove\", (event) => {\r\n      // if mouse is moving and downwards\r\n      if (isMouseDown) {\r\n        // get the currentPosition\r\n        const currentPosition = getMousePosition(event);\r\n        // from yaha se yaha line draw karo\r\n        context.lineTo(currentPosition.x, currentPosition.y);\r\n        // draw it\r\n        context.stroke();\r\n        // call the function with following parameters\r\n        // store the parameters in the drawnArray\r\n        storeDrawn(\r\n          currentPosition.x,\r\n          currentPosition.y,\r\n          currentSize,\r\n          currentColor,\r\n          isEraser\r\n        );\r\n      } else {\r\n        // store nothing\r\n        storeDrawn(undefined);\r\n      }\r\n    });\r\n    // ------------------------------------------------------------//\r\n\r\n    // --------------------- Mouse Up ---------------------------//\r\n    // if move is moving up\r\n    canvas.addEventListener(\"mouseup\", () => {\r\n      // it's NOT moving down\r\n      isMouseDown = false;\r\n    });\r\n    // ------------------------------------------------------------//\r\n\r\n    // ----------------  Save to Local Storage ------------------- //\r\n    // on Button Click\r\n    saveStorageBtn.addEventListener(\"click\", () => {\r\n      // set the localStorage as DrawnArray\r\n      localStorage.setItem(\"savedCanvas\", JSON.stringify(drawnArray));\r\n      // Active Tool ----->>>> text of the left most element\r\n      activeToolEl.textContent = \"Canvas Saved\";\r\n      // after 1.5 seconds switchToBrush\r\n      setTimeout(switchToBrush, 1500);\r\n    });\r\n    // ----------------------------------------------------------- //\r\n\r\n    // ---------------- Load from Local Storage ------------------//\r\n    // on Button Click ->\r\n    loadStorageBtn.addEventListener(\"click\", () => {\r\n      // if there is something in localStorage\r\n      if (localStorage.getItem(\"savedCanvas\")) {\r\n        // fill the drawnArray with the localStorage with the name --->>> 'savedCanvas'\r\n        drawnArray = JSON.parse(localStorage.savedCanvas);\r\n\r\n        // restore Canavs;\r\n        restoreCanvas();\r\n\r\n        // Active Tool ----->>>>> name in the left most element\r\n        activeToolEl.textContent = \"Canvas Loaded\";\r\n        // switch to Brush after 1.5 seconds\r\n        setTimeout(switchToBrush, 1500);\r\n      }\r\n      // nhi toh \"No Canvas Found\"\r\n      else {\r\n        activeToolEl.textContent = \"No Canvas Found\";\r\n        // and switch to Brush after 1.5 seconds\r\n        setTimeout(switchToBrush, 1500);\r\n      }\r\n    });\r\n    // --------------------------------------------------------------//\r\n\r\n    // -------------- Clear Local Storage ----------------------//\r\n    // on button Click\r\n    clearStorageBtn.addEventListener(\"click\", () => {\r\n      // remove the LOCAL STROAGE ITEM with NAME -> \"\" savedCanvas \"\"\r\n      localStorage.removeItem(\"savedCanvas\");\r\n      // Active Tool\r\n      activeToolEl.textContent = \"Local Storage Cleared\";\r\n      // switchToBrush after 1.5 seconds\r\n      setTimeout(switchToBrush, 1500);\r\n    });\r\n    // --------------------------------------------------------------//\r\n\r\n    // ----------------- Download Image ------------------------//\r\n    // on button click ->\r\n    downloadBtn.addEventListener(\"click\", () => {\r\n      // download with URL -> image/jpeg\r\n      downloadBtn.href = canvas.toDataURL(\"image/jpeg\", 1);\r\n      // name of the download\r\n      downloadBtn.download = \"paint-example.jpeg\";\r\n      // Active Tool\r\n      activeToolEl.textContent = \"Image File Saved\";\r\n      // switchToBrush after 1.5 seconds\r\n      setTimeout(switchToBrush, 1500);\r\n    });\r\n    // -----------------------------------------------------------//\r\n\r\n    // ------------------ Event Listener --------------------- //\r\n    // if clicked on BrushIcon then switchToBrush\r\n    brushIcon.addEventListener(\"click\", switchToBrush);\r\n    // ------------------------------------------------------- //\r\n\r\n    // --------------- On Load ------------------------------//\r\n    createCanvas();\r\n    // -------------------------------------------------------//\r\n  };\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}