{"ast":null,"code":"// when the DOM has loaded\nwindow.onload = function () {\n  // create elemnt object whose id is (\" -------- \") ------------------//\n  const activeToolEl = document.getElementById(\"active-tool\");\n  const brushColorBtn = document.getElementById(\"brush-color\");\n  const brushIcon = document.getElementById(\"brush\");\n  const brushSize = document.getElementById(\"brush-size\");\n  const brushSlider = document.getElementById(\"brush-slider\");\n  const bucketColorBtn = document.getElementById(\"bucket-color\");\n  const eraser = document.getElementById(\"eraser\");\n  const clearCanvasBtn = document.getElementById(\"clear-canvas\");\n  const saveStorageBtn = document.getElementById(\"save-storage\");\n  const loadStorageBtn = document.getElementById(\"load-storage\");\n  const clearStorageBtn = document.getElementById(\"clear-storage\");\n  const downloadBtn = document.getElementById(\"download\");\n  const {\n    body\n  } = document; // -----------------------------------------------------------------//\n  // -------------- Global Variables ------------------------ //\n\n  const canvas = document.createElement(\"canvas\"); // id of the canvas\n\n  canvas.id = \"canvas\"; // we want the canvas in 2d or 3d and equalise it to the context -> 2d canvas\n\n  const context = canvas.getContext(\"2d\");\n  let currentSize = 45;\n  let bucketColor = \"#FFFFFF\";\n  let currentColor = \"#000000\";\n  let isEraser = false;\n  let isMouseDown = false;\n  let drawnArray = []; // -------------------------------------------------------//\n  // -------------- Formatting Brush Size --------------------//\n\n  function displayBrushSize() {\n    // if brushSlider - (document with id = brush-slider) value is less than 10\n    if (brushSlider.value < 10) {\n      // change the text of brushSIze tp brushSlider value and add zero before it;\n      brushSize.textContent = `0${brushSlider.value}`;\n    } else {\n      // change the text of brushSIze tp brushSlider value\n      brushSize.textContent = brushSlider.value;\n    }\n  } // ------------------------------------------------------------//\n  //--------------- Setting Brush Size ----------------------//\n  // on changing of the value of the brushSlider\n\n\n  brushSlider.addEventListener(\"change\", () => {\n    // change the currentSize and set it to the value\n    currentSize = brushSlider.value; // display the brush Size by calling the function\n\n    displayBrushSize();\n  }); // -----------------------------------------------------------//\n  // ------------------- Setting Brush Color ------------------//\n  // if there is a chnage then call this \n\n  brushColorBtn.addEventListener(\"change\", () => {\n    // isEraser  = false (it is not an eraser)\n    isEraser = false; // select color according to the value of the brushColorBtn\n\n    currentColor = `#${brushColorBtn.value}`;\n  }); // ----------------------------------------------------------//\n  // -----------------Setting Background Color ----------------//\n  // if there is any change\n\n  bucketColorBtn.addEventListener(\"change\", () => {\n    // bucket color is equal to the bucketColorBtn value\n    bucketColor = `#${bucketColorBtn.value}`; // call create canvas\n\n    createCanvas(); // call restore canvas\n\n    restoreCanvas(); // it is basically the filling of the entire canvas white background with the same color\n  }); // ----------------------------------------------------------//\n  // ---------------- Eraser -------------------------//\n  // on button click with id -> ersaer ->\n\n  eraser.addEventListener(\"click\", () => {\n    // isEraser -> yes,\n    isEraser = true; // color of brushIcon -> \"white\"\n\n    brushIcon.style.color = \"white\"; // color of eraser stroke -> \"white\"\n\n    eraser.style.color = \"black\"; // text inside the left most Button\n\n    activeToolEl.textContent = \"Eraser\"; // currentColor === ----->>>>>  bucketColor \n\n    currentColor = bucketColor; // currentSize ---->>>> 50;\n\n    currentSize = 50;\n  }); // ----------------------------------------------------//\n  // ----------------- Switch back to Brush ---------------//\n\n  function switchToBrush() {\n    // it's not the eraser\n    isEraser = false; // text of the left most element\n\n    activeToolEl.textContent = \"Brush\"; // color of the brushIcon\n\n    brushIcon.style.color = \"black\"; // color of the eraser icon\n\n    eraser.style.color = \"white\"; // currentColor ---->>> value\n\n    currentColor = `#${brushColorBtn.value}`; // currentSize ----->>>> 45\n\n    currentSize = 45; // sliderValue ----->>>> 45\n\n    brushSlider.value = 45; // display the size of the Brush also\n\n    displayBrushSize();\n  } // -------------------------------------------------------//\n  // ---------------- Create Canvas ----------------------//\n\n\n  function createCanvas() {\n    // canvas ki width -> jitni window ki width hai\n    canvas.width = window.innerWidth; // canvas ki height -> jitni window ki height hai\n\n    canvas.height = window.innerHeight - 50; // fill the entire canvas with bucketColor -> make changes in the context (2d context) -> where we draw\n\n    context.fillStyle = bucketColor; // fill the canvas from canvas width till canvas height\n\n    context.fillRect(0, 0, canvas.width, canvas.height); // make changes in the entire body which are made in the canvas element\n\n    body.appendChild(canvas); // switch to brush\n\n    switchToBrush();\n  } // ------------------------------------------------------//\n  // ---------------- Clear Canvas -----------------------------//\n\n\n  clearCanvasBtn.addEventListener(\"click\", () => {\n    // createCanvas() from scratch\n    createCanvas(); // drwanArray is Empty\n\n    drawnArray = []; // Active Tool ---->>>> text in the left most element\n\n    activeToolEl.textContent = \"Canvas Cleared\"; // switch to Brush automatically after 1.5 seconds\n\n    setTimeout(switchToBrush, 1500);\n  }); // ------------------------------------------------------------//\n  // ------------ Draw what is stored in DrawnArray ----------------//\n  // restore canvas function\n\n  function restoreCanvas() {\n    // array of points where the mouse moved through\n    for (let i = 1; i < drawnArray.length; i++) {\n      // continuous path function in the canvas function and element of the HTML\n      context.beginPath(); // join all the elements\n\n      context.moveTo(drawnArray[i - 1].x, drawnArray[i - 1].y); // How thick the line should be? -> equal to the size stored in the drawnArray\n\n      context.lineWidth = drawnArray[i].size; // how the line should be like  -> round shaped\n\n      context.lineCap = \"round\"; // if we are using eraser\n\n      if (drawnArray[i].eraser) {\n        // then stroke style -> when you click what is visible -> should have bucketColor\n        context.strokeStyle = bucketColor;\n      } else {\n        // nhi toh equal to the color selected\n        context.strokeStyle = drawnArray[i].color;\n      } // x -> y tak line honi chahiye\n\n\n      context.lineTo(drawnArray[i].x, drawnArray[i].y); // Draw it -> yeh sabb kuch calculate karke draw karo -> instruction to Computer\n\n      context.stroke();\n    }\n  } // ----------------------------------------------------------------//\n  // --------------- Store Drawn Lines in DrawnArray ----------------//\n\n\n  function storeDrawn(x, y, size, color, erase) {\n    // push the following in the drwanArray\n    const line = {\n      x,\n      y,\n      size,\n      color,\n      erase\n    }; // put / push\n\n    drawnArray.push(line);\n  } // ----------------------------------------------------------------//\n  // --------------------- Get Mouse Position ---------------- //\n  // as soon as mouse is clicked\n\n\n  function getMousePosition(event) {\n    // get the x and y coordinate of the mouse clicked\n    const boundaries = canvas.getBoundingClientRect();\n    return {\n      x: event.clientX - boundaries.left,\n      y: event.clientY - boundaries.top\n    };\n  } // ---------------------------------------------------------//\n  // ---------------------- Mouse Down -----------------------//\n  // if mouse is pulled down\n\n\n  canvas.addEventListener(\"mousedown\", event => {\n    // set isMouseDown to True\n    isMouseDown = true; // get the current Position of the mouse\n\n    const currentPosition = getMousePosition(event); // from x to y fill it\n\n    context.moveTo(currentPosition.x, currentPosition.y); // then start the path\n\n    context.beginPath(); // line width equal to current size\n\n    context.lineWidth = currentSize; // line cap = \"round\"\n\n    context.lineCap = \"round\"; // strokeStyle should be equal to the currentColor\n\n    context.strokeStyle = currentColor;\n  }); // ---------------------------------------------------------//\n  // ------------------------ Mouse Move ---------------------//\n  // if mouse moves up\n\n  canvas.addEventListener(\"mousemove\", event => {\n    // if mouse is moving and downwards\n    if (isMouseDown) {\n      // get the currentPosition\n      const currentPosition = getMousePosition(event); // from yaha se yaha line draw karo\n\n      context.lineTo(currentPosition.x, currentPosition.y); // draw it\n\n      context.stroke(); // call the function with following parameters\n      // store the parameters in the drawnArray\n\n      storeDrawn(currentPosition.x, currentPosition.y, currentSize, currentColor, isEraser);\n    } else {\n      // store nothing\n      storeDrawn(undefined);\n    }\n  }); // ------------------------------------------------------------//\n  // --------------------- Mouse Up ---------------------------//\n  // if move is moving up\n\n  canvas.addEventListener(\"mouseup\", () => {\n    // it's NOT moving down\n    isMouseDown = false;\n  }); // ------------------------------------------------------------//\n  // ----------------  Save to Local Storage ------------------- //\n  // on Button Click\n\n  saveStorageBtn.addEventListener(\"click\", () => {\n    // set the localStorage as DrawnArray\n    localStorage.setItem(\"savedCanvas\", JSON.stringify(drawnArray)); // Active Tool ----->>>> text of the left most element\n\n    activeToolEl.textContent = \"Canvas Saved\"; // after 1.5 seconds switchToBrush\n\n    setTimeout(switchToBrush, 1500);\n  }); // ----------------------------------------------------------- //\n  // ---------------- Load from Local Storage ------------------//\n  // on Button Click -> \n\n  loadStorageBtn.addEventListener(\"click\", () => {\n    // if there is something in localStorage\n    if (localStorage.getItem(\"savedCanvas\")) {\n      // fill the drawnArray with the localStorage with the name --->>> 'savedCanvas'\n      drawnArray = JSON.parse(localStorage.savedCanvas); // restore Canavs;\n\n      restoreCanvas(); // Active Tool ----->>>>> name in the left most element\n\n      activeToolEl.textContent = \"Canvas Loaded\"; // switch to Brush after 1.5 seconds\n\n      setTimeout(switchToBrush, 1500);\n    } // nhi toh \"No Canvas Found\"\n    else {\n      activeToolEl.textContent = \"No Canvas Found\"; // and switch to Brush after 1.5 seconds\n\n      setTimeout(switchToBrush, 1500);\n    }\n  }); // --------------------------------------------------------------//\n  // -------------- Clear Local Storage ----------------------//\n  // on button Click\n\n  clearStorageBtn.addEventListener(\"click\", () => {\n    // remove the LOCAL STROAGE ITEM with NAME -> \"\" savedCanvas \"\"\n    localStorage.removeItem(\"savedCanvas\"); // Active Tool\n\n    activeToolEl.textContent = \"Local Storage Cleared\"; // switchToBrush after 1.5 seconds\n\n    setTimeout(switchToBrush, 1500);\n  }); // --------------------------------------------------------------//\n  // ----------------- Download Image ------------------------//\n  // on button click -> \n\n  downloadBtn.addEventListener(\"click\", () => {\n    // download with URL -> image/jpeg\n    downloadBtn.href = canvas.toDataURL(\"image/jpeg\", 1); // name of the download\n\n    downloadBtn.download = \"paint-example.jpeg\"; // Active Tool\n\n    activeToolEl.textContent = \"Image File Saved\"; // switchToBrush after 1.5 seconds\n\n    setTimeout(switchToBrush, 1500);\n  }); // -----------------------------------------------------------//\n  // ------------------ Event Listener --------------------- //\n  // if clicked on BrushIcon then switchToBrush\n\n  brushIcon.addEventListener(\"click\", switchToBrush); // ------------------------------------------------------- //\n  // --------------- On Load ------------------------------//\n\n  createCanvas(); // -------------------------------------------------------//\n};","map":{"version":3,"names":["window","onload","activeToolEl","document","getElementById","brushColorBtn","brushIcon","brushSize","brushSlider","bucketColorBtn","eraser","clearCanvasBtn","saveStorageBtn","loadStorageBtn","clearStorageBtn","downloadBtn","body","canvas","createElement","id","context","getContext","currentSize","bucketColor","currentColor","isEraser","isMouseDown","drawnArray","displayBrushSize","value","textContent","addEventListener","createCanvas","restoreCanvas","style","color","switchToBrush","width","innerWidth","height","innerHeight","fillStyle","fillRect","appendChild","setTimeout","i","length","beginPath","moveTo","x","y","lineWidth","size","lineCap","strokeStyle","lineTo","stroke","storeDrawn","erase","line","push","getMousePosition","event","boundaries","getBoundingClientRect","clientX","left","clientY","top","currentPosition","undefined","localStorage","setItem","JSON","stringify","getItem","parse","savedCanvas","removeItem","href","toDataURL","download"],"sources":["D:/Mac OS X Projects/7. Mini-Apps/paint-clone-2/src/script.js"],"sourcesContent":["// when the DOM has loaded\r\nwindow.onload=function(){\r\n  // create elemnt object whose id is (\" -------- \") ------------------//\r\n  const activeToolEl = document.getElementById(\"active-tool\");\r\n  const brushColorBtn = document.getElementById(\"brush-color\");\r\n  const brushIcon = document.getElementById(\"brush\");\r\n  const brushSize = document.getElementById(\"brush-size\");\r\n  const brushSlider = document.getElementById(\"brush-slider\");\r\n  const bucketColorBtn = document.getElementById(\"bucket-color\");\r\n  const eraser = document.getElementById(\"eraser\");\r\n  const clearCanvasBtn = document.getElementById(\"clear-canvas\");\r\n  const saveStorageBtn = document.getElementById(\"save-storage\");\r\n  const loadStorageBtn = document.getElementById(\"load-storage\");\r\n  const clearStorageBtn = document.getElementById(\"clear-storage\");\r\n  const downloadBtn = document.getElementById(\"download\");\r\n  const { body } = document;\r\n  // -----------------------------------------------------------------//\r\n\r\n  // -------------- Global Variables ------------------------ //\r\n  const canvas = document.createElement(\"canvas\");\r\n  // id of the canvas\r\n  canvas.id = \"canvas\";\r\n  // we want the canvas in 2d or 3d and equalise it to the context -> 2d canvas\r\n  const context = canvas.getContext(\"2d\");\r\n  let currentSize = 45;\r\n  let bucketColor = \"#FFFFFF\";\r\n  let currentColor = \"#000000\";\r\n  let isEraser = false;\r\n  let isMouseDown = false;\r\n  let drawnArray = [];\r\n  // -------------------------------------------------------//\r\n\r\n  // -------------- Formatting Brush Size --------------------//\r\n  function displayBrushSize() {\r\n    // if brushSlider - (document with id = brush-slider) value is less than 10\r\n    if (brushSlider.value < 10) {\r\n      // change the text of brushSIze tp brushSlider value and add zero before it;\r\n      brushSize.textContent = `0${brushSlider.value}`;\r\n    } else {\r\n      // change the text of brushSIze tp brushSlider value\r\n      brushSize.textContent = brushSlider.value;\r\n    }\r\n  }\r\n  // ------------------------------------------------------------//\r\n\r\n\r\n  //--------------- Setting Brush Size ----------------------//\r\n  // on changing of the value of the brushSlider\r\n  brushSlider.addEventListener(\"change\", () => {\r\n    // change the currentSize and set it to the value\r\n    currentSize = brushSlider.value;\r\n    // display the brush Size by calling the function\r\n    displayBrushSize();\r\n  });\r\n  // -----------------------------------------------------------//\r\n\r\n\r\n  // ------------------- Setting Brush Color ------------------//\r\n  // if there is a chnage then call this \r\n  brushColorBtn.addEventListener(\"change\", () => {\r\n    // isEraser  = false (it is not an eraser)\r\n    isEraser = false;\r\n    // select color according to the value of the brushColorBtn\r\n    currentColor = `#${brushColorBtn.value}`;\r\n  });\r\n  // ----------------------------------------------------------//\r\n\r\n\r\n  // -----------------Setting Background Color ----------------//\r\n  // if there is any change\r\n  bucketColorBtn.addEventListener(\"change\", () => {\r\n    // bucket color is equal to the bucketColorBtn value\r\n    bucketColor = `#${bucketColorBtn.value}`;\r\n    // call create canvas\r\n    createCanvas();\r\n    // call restore canvas\r\n    restoreCanvas();\r\n    // it is basically the filling of the entire canvas white background with the same color\r\n  });\r\n  // ----------------------------------------------------------//\r\n\r\n\r\n\r\n  // ---------------- Eraser -------------------------//\r\n  // on button click with id -> ersaer ->\r\n  eraser.addEventListener(\"click\", () => {\r\n    // isEraser -> yes,\r\n    isEraser = true;\r\n    // color of brushIcon -> \"white\"\r\n    brushIcon.style.color = \"white\";\r\n    // color of eraser stroke -> \"white\"\r\n    eraser.style.color = \"black\";\r\n    // text inside the left most Button\r\n    activeToolEl.textContent = \"Eraser\";\r\n    // currentColor === ----->>>>>  bucketColor \r\n    currentColor = bucketColor;\r\n    // currentSize ---->>>> 50;\r\n    currentSize = 50;\r\n  });\r\n// ----------------------------------------------------//\r\n\r\n\r\n\r\n  // ----------------- Switch back to Brush ---------------//\r\n  function switchToBrush() {\r\n    // it's not the eraser\r\n    isEraser = false;\r\n    // text of the left most element\r\n    activeToolEl.textContent = \"Brush\";\r\n    // color of the brushIcon\r\n    brushIcon.style.color = \"black\";\r\n    // color of the eraser icon\r\n    eraser.style.color = \"white\";\r\n    // currentColor ---->>> value\r\n    currentColor = `#${brushColorBtn.value}`;\r\n    // currentSize ----->>>> 45\r\n    currentSize = 45;\r\n    // sliderValue ----->>>> 45\r\n    brushSlider.value = 45;\r\n    // display the size of the Brush also\r\n    displayBrushSize();\r\n  }\r\n// -------------------------------------------------------//\r\n\r\n\r\n\r\n\r\n  // ---------------- Create Canvas ----------------------//\r\n  function createCanvas() {\r\n    // canvas ki width -> jitni window ki width hai\r\n    canvas.width = window.innerWidth;\r\n    // canvas ki height -> jitni window ki height hai\r\n    canvas.height = window.innerHeight - 50;\r\n    // fill the entire canvas with bucketColor -> make changes in the context (2d context) -> where we draw\r\n    context.fillStyle = bucketColor;\r\n    // fill the canvas from canvas width till canvas height\r\n    context.fillRect(0, 0, canvas.width, canvas.height);\r\n    // make changes in the entire body which are made in the canvas element\r\n    body.appendChild(canvas);\r\n    // switch to brush\r\n    switchToBrush();\r\n  }\r\n  // ------------------------------------------------------//\r\n\r\n\r\n\r\n  // ---------------- Clear Canvas -----------------------------//\r\n  clearCanvasBtn.addEventListener(\"click\", () => {\r\n    // createCanvas() from scratch\r\n    createCanvas();\r\n    // drwanArray is Empty\r\n    drawnArray = [];\r\n    // Active Tool ---->>>> text in the left most element\r\n    activeToolEl.textContent = \"Canvas Cleared\";\r\n    // switch to Brush automatically after 1.5 seconds\r\n    setTimeout(switchToBrush, 1500);\r\n  });\r\n// ------------------------------------------------------------//\r\n\r\n\r\n\r\n  // ------------ Draw what is stored in DrawnArray ----------------//\r\n  // restore canvas function\r\n  function restoreCanvas() {\r\n    // array of points where the mouse moved through\r\n    for (let i = 1; i < drawnArray.length; i++) {\r\n      // continuous path function in the canvas function and element of the HTML\r\n      context.beginPath();\r\n      // join all the elements\r\n      context.moveTo(drawnArray[i - 1].x, drawnArray[i - 1].y);\r\n      // How thick the line should be? -> equal to the size stored in the drawnArray\r\n      context.lineWidth = drawnArray[i].size;\r\n      // how the line should be like  -> round shaped\r\n      context.lineCap = \"round\";\r\n      // if we are using eraser\r\n      if (drawnArray[i].eraser) {\r\n        // then stroke style -> when you click what is visible -> should have bucketColor\r\n        context.strokeStyle = bucketColor;\r\n      } else {\r\n        // nhi toh equal to the color selected\r\n        context.strokeStyle = drawnArray[i].color;\r\n      }\r\n      // x -> y tak line honi chahiye\r\n      context.lineTo(drawnArray[i].x, drawnArray[i].y);\r\n      // Draw it -> yeh sabb kuch calculate karke draw karo -> instruction to Computer\r\n      context.stroke();\r\n    }\r\n  }\r\n  // ----------------------------------------------------------------//\r\n\r\n\r\n  // --------------- Store Drawn Lines in DrawnArray ----------------//\r\n  function storeDrawn(x, y, size, color, erase) {\r\n    // push the following in the drwanArray\r\n    const line = {\r\n      x,\r\n      y,\r\n      size,\r\n      color,\r\n      erase,\r\n    };\r\n    // put / push\r\n    drawnArray.push(line);\r\n  }\r\n  // ----------------------------------------------------------------//\r\n\r\n\r\n\r\n  // --------------------- Get Mouse Position ---------------- //\r\n  // as soon as mouse is clicked\r\n  function getMousePosition(event) {\r\n    // get the x and y coordinate of the mouse clicked\r\n    const boundaries = canvas.getBoundingClientRect();\r\n    return {\r\n      x: event.clientX - boundaries.left,\r\n      y: event.clientY - boundaries.top,\r\n    };\r\n  }\r\n  // ---------------------------------------------------------//\r\n\r\n\r\n\r\n  // ---------------------- Mouse Down -----------------------//\r\n  // if mouse is pulled down\r\n  canvas.addEventListener(\"mousedown\", (event) => {\r\n    // set isMouseDown to True\r\n    isMouseDown = true;\r\n    // get the current Position of the mouse\r\n    const currentPosition = getMousePosition(event);\r\n    // from x to y fill it\r\n    context.moveTo(currentPosition.x, currentPosition.y);\r\n    // then start the path\r\n    context.beginPath();\r\n    // line width equal to current size\r\n    context.lineWidth = currentSize;\r\n    // line cap = \"round\"\r\n    context.lineCap = \"round\";\r\n    // strokeStyle should be equal to the currentColor\r\n    context.strokeStyle = currentColor;\r\n  });\r\n  // ---------------------------------------------------------//\r\n\r\n\r\n\r\n  // ------------------------ Mouse Move ---------------------//\r\n  \r\n  // if mouse moves up\r\n  canvas.addEventListener(\"mousemove\", (event) => {\r\n    // if mouse is moving and downwards\r\n    if (isMouseDown) {\r\n      // get the currentPosition\r\n      const currentPosition = getMousePosition(event);\r\n      // from yaha se yaha line draw karo\r\n      context.lineTo(currentPosition.x, currentPosition.y);\r\n      // draw it\r\n      context.stroke();\r\n      // call the function with following parameters\r\n      // store the parameters in the drawnArray\r\n      storeDrawn(\r\n        currentPosition.x,\r\n        currentPosition.y,\r\n        currentSize,\r\n        currentColor,\r\n        isEraser\r\n      );\r\n    } else {\r\n      // store nothing\r\n      storeDrawn(undefined);\r\n    }\r\n  });\r\n// ------------------------------------------------------------//\r\n\r\n\r\n// --------------------- Mouse Up ---------------------------//\r\n  // if move is moving up\r\n  canvas.addEventListener(\"mouseup\", () => {\r\n    // it's NOT moving down\r\n    isMouseDown = false;\r\n  });\r\n// ------------------------------------------------------------//\r\n\r\n\r\n  // ----------------  Save to Local Storage ------------------- //\r\n  // on Button Click\r\n  saveStorageBtn.addEventListener(\"click\", () => {\r\n    // set the localStorage as DrawnArray\r\n    localStorage.setItem(\"savedCanvas\", JSON.stringify(drawnArray));\r\n    // Active Tool ----->>>> text of the left most element\r\n    activeToolEl.textContent = \"Canvas Saved\";\r\n    // after 1.5 seconds switchToBrush\r\n    setTimeout(switchToBrush, 1500);\r\n  });\r\n  // ----------------------------------------------------------- //\r\n\r\n\r\n\r\n  // ---------------- Load from Local Storage ------------------//\r\n  // on Button Click -> \r\n  loadStorageBtn.addEventListener(\"click\", () => {\r\n    // if there is something in localStorage\r\n    if (localStorage.getItem(\"savedCanvas\")) {\r\n      \r\n      // fill the drawnArray with the localStorage with the name --->>> 'savedCanvas'\r\n      drawnArray = JSON.parse(localStorage.savedCanvas);\r\n      \r\n      // restore Canavs;\r\n      restoreCanvas();\r\n\r\n      // Active Tool ----->>>>> name in the left most element\r\n      activeToolEl.textContent = \"Canvas Loaded\";\r\n      // switch to Brush after 1.5 seconds\r\n      setTimeout(switchToBrush, 1500);\r\n    } \r\n    // nhi toh \"No Canvas Found\"\r\n    else {\r\n      activeToolEl.textContent = \"No Canvas Found\";\r\n      // and switch to Brush after 1.5 seconds\r\n      setTimeout(switchToBrush, 1500);\r\n    }\r\n  });\r\n// --------------------------------------------------------------//\r\n\r\n\r\n  // -------------- Clear Local Storage ----------------------//\r\n  // on button Click\r\n  clearStorageBtn.addEventListener(\"click\", () => {\r\n   // remove the LOCAL STROAGE ITEM with NAME -> \"\" savedCanvas \"\"\r\n    localStorage.removeItem(\"savedCanvas\");\r\n    // Active Tool\r\n    activeToolEl.textContent = \"Local Storage Cleared\";\r\n    // switchToBrush after 1.5 seconds\r\n    setTimeout(switchToBrush, 1500);\r\n  });\r\n// --------------------------------------------------------------//\r\n\r\n\r\n\r\n  // ----------------- Download Image ------------------------//\r\n  // on button click -> \r\n  downloadBtn.addEventListener(\"click\", () => {\r\n    // download with URL -> image/jpeg\r\n    downloadBtn.href = canvas.toDataURL(\"image/jpeg\", 1);\r\n    // name of the download\r\n    downloadBtn.download = \"paint-example.jpeg\";\r\n    // Active Tool\r\n    activeToolEl.textContent = \"Image File Saved\";\r\n    // switchToBrush after 1.5 seconds\r\n    setTimeout(switchToBrush, 1500);\r\n  });\r\n  // -----------------------------------------------------------//\r\n\r\n\r\n\r\n  // ------------------ Event Listener --------------------- //\r\n  // if clicked on BrushIcon then switchToBrush\r\n  brushIcon.addEventListener(\"click\", switchToBrush);\r\n  // ------------------------------------------------------- //\r\n\r\n  // --------------- On Load ------------------------------//\r\n  createCanvas();\r\n  // -------------------------------------------------------//\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}